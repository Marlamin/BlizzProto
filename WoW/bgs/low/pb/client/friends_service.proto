import "bgs/low/pb/client/attribute_types.proto";
import "bgs/low/pb/client/entity_types.proto";
import "bgs/low/pb/client/friends_types.proto";
import "bgs/low/pb/client/invitation_types.proto";
import "bgs/low/pb/client/role_types.proto";
import "bgs/low/pb/client/rpc_types.proto";

package bgs.protocol.friends.v1;

option optimize_for = CODE_SIZE;
option cc_generic_services = false;
option java_package = "bnet.protocol.friends.v1";
option java_outer_classname = "FriendsServiceProto";
option java_generic_services = true;

message SubscribeRequest {
	optional .bgs.protocol.EntityId agent_id = 1;
	required uint64 object_id = 2;
}

message SubscribeResponse {
	optional uint32 max_friends = 1;
	optional uint32 max_received_invitations = 2;
	optional uint32 max_sent_invitations = 3;
	repeated .bgs.protocol.Role role = 4;
	repeated .bgs.protocol.friends.v1.Friend friends = 5;
	repeated .bgs.protocol.Invitation sent_invitations = 6;
	repeated .bgs.protocol.Invitation received_invitations = 7;
}

message UnsubscribeRequest {
	optional .bgs.protocol.EntityId agent_id = 1;
	optional uint64 object_id = 2;
}

message GenericFriendRequest {
	optional .bgs.protocol.EntityId agent_id = 1;
	required .bgs.protocol.EntityId target_id = 2;
}

message GenericFriendResponse {
	optional .bgs.protocol.friends.v1.Friend target_friend = 1;
}

message AssignRoleRequest {
	optional .bgs.protocol.EntityId agent_id = 1;
	required .bgs.protocol.EntityId target_id = 2;
	repeated int32 role = 3;
}

message ViewFriendsRequest {
	optional .bgs.protocol.EntityId agent_id = 1;
	required .bgs.protocol.EntityId target_id = 2;
	repeated uint32 role = 3 [packed = true];
}

message ViewFriendsResponse {
	repeated .bgs.protocol.friends.v1.Friend friends = 1;
}

message UpdateFriendStateRequest {
	optional .bgs.protocol.EntityId agent_id = 1;
	required .bgs.protocol.EntityId target_id = 2;
	repeated .bgs.protocol.Attribute attribute = 3;
	optional uint64 attributes_epoch = 4;
}

message FriendNotification {
	required .bgs.protocol.friends.v1.Friend target = 1;
	optional .bgs.protocol.EntityId game_account_id = 2;
	optional .bgs.protocol.ProcessId peer = 4;
	optional .bgs.protocol.EntityId account_id = 5;
}

message UpdateFriendStateNotification {
	required .bgs.protocol.friends.v1.Friend changed_friend = 1;
	optional .bgs.protocol.EntityId game_account_id = 2;
	optional .bgs.protocol.ProcessId peer = 4;
	optional .bgs.protocol.EntityId account_id = 5;
}

message InvitationNotification {
	required .bgs.protocol.Invitation invitation = 1;
	optional .bgs.protocol.EntityId game_account_id = 2;
	optional uint32 reason = 3 [default = 0];
	optional .bgs.protocol.ProcessId peer = 4;
	optional .bgs.protocol.EntityId account_id = 5;
}

service FriendsService {
	option (original_fully_qualified_descriptor_name) = "bnet.protocol.friends.FriendsService";

	rpc Subscribe (.bgs.protocol.friends.v1.SubscribeRequest) returns (.bgs.protocol.friends.v1.SubscribeResponse) {
		option (method_id) = 1;
	}

	rpc SendInvitation (.bgs.protocol.SendInvitationRequest) returns (.bgs.protocol.NoData) {
		option (method_id) = 2;
	}

	rpc AcceptInvitation (.bgs.protocol.GenericInvitationRequest) returns (.bgs.protocol.NoData) {
		option (method_id) = 3;
	}

	rpc RevokeInvitation (.bgs.protocol.GenericInvitationRequest) returns (.bgs.protocol.NoData) {
		option deprecated = true;
		option (method_id) = 4;
	}

	rpc DeclineInvitation (.bgs.protocol.GenericInvitationRequest) returns (.bgs.protocol.NoData) {
		option (method_id) = 5;
	}

	rpc IgnoreInvitation (.bgs.protocol.GenericInvitationRequest) returns (.bgs.protocol.NoData) {
		option (method_id) = 6;
	}

	rpc AssignRole (.bgs.protocol.friends.v1.AssignRoleRequest) returns (.bgs.protocol.NoData) {
		option (method_id) = 7;
	}

	rpc RemoveFriend (.bgs.protocol.friends.v1.GenericFriendRequest) returns (.bgs.protocol.friends.v1.GenericFriendResponse) {
		option (method_id) = 8;
	}

	rpc ViewFriends (.bgs.protocol.friends.v1.ViewFriendsRequest) returns (.bgs.protocol.friends.v1.ViewFriendsResponse) {
		option (method_id) = 9;
	}

	rpc UpdateFriendState (.bgs.protocol.friends.v1.UpdateFriendStateRequest) returns (.bgs.protocol.NoData) {
		option (method_id) = 10;
	}

	rpc Unsubscribe (.bgs.protocol.friends.v1.UnsubscribeRequest) returns (.bgs.protocol.NoData) {
		option (method_id) = 11;
	}

	rpc RevokeAllInvitations (.bgs.protocol.friends.v1.GenericFriendRequest) returns (.bgs.protocol.NoData) {
		option (method_id) = 12;
	}
}

service FriendsListener {
	option (original_fully_qualified_descriptor_name) = "bnet.protocol.friends.FriendsNotify";

	rpc OnFriendAdded (.bgs.protocol.friends.v1.FriendNotification) returns (.bgs.protocol.NO_RESPONSE) {
		option (method_id) = 1;
	}

	rpc OnFriendRemoved (.bgs.protocol.friends.v1.FriendNotification) returns (.bgs.protocol.NO_RESPONSE) {
		option (method_id) = 2;
	}

	rpc OnReceivedInvitationAdded (.bgs.protocol.friends.v1.InvitationNotification) returns (.bgs.protocol.NO_RESPONSE) {
		option (method_id) = 3;
	}

	rpc OnReceivedInvitationRemoved (.bgs.protocol.friends.v1.InvitationNotification) returns (.bgs.protocol.NO_RESPONSE) {
		option (method_id) = 4;
	}

	rpc OnSentInvitationAdded (.bgs.protocol.friends.v1.InvitationNotification) returns (.bgs.protocol.NO_RESPONSE) {
		option deprecated = true;
		option (method_id) = 5;
	}

	rpc OnSentInvitationRemoved (.bgs.protocol.friends.v1.InvitationNotification) returns (.bgs.protocol.NO_RESPONSE) {
		option deprecated = true;
		option (method_id) = 6;
	}

	rpc OnUpdateFriendState (.bgs.protocol.friends.v1.UpdateFriendStateNotification) returns (.bgs.protocol.NO_RESPONSE) {
		option (method_id) = 7;
	}
}
