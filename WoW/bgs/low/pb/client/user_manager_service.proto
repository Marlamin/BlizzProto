import "bgs/low/pb/client/user_manager_types.proto";
import "bgs/low/pb/client/entity_types.proto";
import "bgs/low/pb/client/role_types.proto";
import "bgs/low/pb/client/rpc_types.proto";

package bgs.protocol.user_manager.v1;

option optimize_for = CODE_SIZE;
option cc_generic_services = false;

message SubscribeRequest {
	optional .bgs.protocol.EntityId agent_id = 1;
	required uint64 object_id = 2;
}

message SubscribeResponse {
	repeated .bgs.protocol.user_manager.v1.BlockedPlayer blocked_players = 1;
	repeated .bgs.protocol.user_manager.v1.RecentPlayer recent_players = 2;
	repeated .bgs.protocol.Role role = 3;
}

message UnsubscribeRequest {
	optional .bgs.protocol.EntityId agent_id = 1;
	optional uint64 object_id = 2;
}

message AddRecentPlayersRequest {
	repeated .bgs.protocol.user_manager.v1.RecentPlayer players = 1;
	optional .bgs.protocol.EntityId agent_id = 2;
	optional uint32 program = 3;
}

message AddRecentPlayersResponse {
	repeated .bgs.protocol.user_manager.v1.RecentPlayer players_added = 1;
	repeated fixed32 players_removed = 3;
}

message ClearRecentPlayersRequest {
	optional .bgs.protocol.EntityId agent_id = 1;
	optional uint32 program = 2;
}

message ClearRecentPlayersResponse {
	repeated fixed32 players_removed = 1;
}

message BlockPlayerRequest {
	optional .bgs.protocol.EntityId agent_id = 1;
	required .bgs.protocol.EntityId target_id = 2;
	optional uint32 role = 3;
}

message UnblockPlayerRequest {
	optional .bgs.protocol.EntityId agent_id = 1;
	required .bgs.protocol.EntityId target_id = 2;
}

message BlockedPlayerAddedNotification {
	required .bgs.protocol.user_manager.v1.BlockedPlayer player = 1;
	optional .bgs.protocol.EntityId game_account_id = 2;
	optional .bgs.protocol.EntityId account_id = 3;
}

message BlockedPlayerRemovedNotification {
	required .bgs.protocol.user_manager.v1.BlockedPlayer player = 1;
	optional .bgs.protocol.EntityId game_account_id = 2;
	optional .bgs.protocol.EntityId account_id = 3;
}

message RecentPlayersAddedNotification {
	repeated .bgs.protocol.user_manager.v1.RecentPlayer player = 1;
}

message RecentPlayersRemovedNotification {
	repeated .bgs.protocol.user_manager.v1.RecentPlayer player = 1;
}

service UserManagerService {
	option (original_fully_qualified_descriptor_name) = "bnet.protocol.user_manager.UserManagerService";

	rpc Subscribe (.bgs.protocol.user_manager.v1.SubscribeRequest) returns (.bgs.protocol.user_manager.v1.SubscribeResponse) {
		option (method_id) = 1;
	}

	rpc AddRecentPlayers (.bgs.protocol.user_manager.v1.AddRecentPlayersRequest) returns (.bgs.protocol.user_manager.v1.AddRecentPlayersResponse) {
		option (method_id) = 10;
	}

	rpc ClearRecentPlayers (.bgs.protocol.user_manager.v1.ClearRecentPlayersRequest) returns (.bgs.protocol.user_manager.v1.ClearRecentPlayersResponse) {
		option (method_id) = 11;
	}

	rpc BlockPlayer (.bgs.protocol.user_manager.v1.BlockPlayerRequest) returns (.bgs.protocol.NoData) {
		option (method_id) = 20;
	}

	rpc UnblockPlayer (.bgs.protocol.user_manager.v1.UnblockPlayerRequest) returns (.bgs.protocol.NoData) {
		option (method_id) = 21;
	}

	rpc BlockPlayerForSession (.bgs.protocol.user_manager.v1.BlockPlayerRequest) returns (.bgs.protocol.NoData) {
		option (method_id) = 40;
	}

	rpc LoadBlockList (.bgs.protocol.EntityId) returns (.bgs.protocol.NoData) {
		option (method_id) = 50;
	}

	rpc Unsubscribe (.bgs.protocol.user_manager.v1.UnsubscribeRequest) returns (.bgs.protocol.NoData) {
		option (method_id) = 51;
	}
}

service UserManagerListener {
	option (original_fully_qualified_descriptor_name) = "bnet.protocol.user_manager.UserManagerNotify";

	rpc OnBlockedPlayerAdded (.bgs.protocol.user_manager.v1.BlockedPlayerAddedNotification) returns (.bgs.protocol.NO_RESPONSE) {
		option (method_id) = 1;
	}

	rpc OnBlockedPlayerRemoved (.bgs.protocol.user_manager.v1.BlockedPlayerRemovedNotification) returns (.bgs.protocol.NO_RESPONSE) {
		option (method_id) = 2;
	}

	rpc OnRecentPlayersAdded (.bgs.protocol.user_manager.v1.RecentPlayersAddedNotification) returns (.bgs.protocol.NO_RESPONSE) {
		option (method_id) = 11;
	}

	rpc OnRecentPlayersRemoved (.bgs.protocol.user_manager.v1.RecentPlayersRemovedNotification) returns (.bgs.protocol.NO_RESPONSE) {
		option (method_id) = 12;
	}
}
